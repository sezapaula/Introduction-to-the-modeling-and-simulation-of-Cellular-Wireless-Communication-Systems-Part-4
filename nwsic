clear all;
clc;
close all;

%% Definição dos parâmetros gerais da simulação
tSQUARE = 100;  % tamanho do grid em M
bT = 10^8;  % largura de banda em Hz
nChannel = 1;  % número de canais
UEpot = 1;  % potência de transmissão do usuário
c = 10^-4;  % constante do modelo de propagação
nmrUE =9;  % número de usuários
nmrAP=1;  % número de APs
k0 = 10^-20; % constante do ruído
a = 4;  % expoente de pathloss

%% Lógica da formação das posições dos APs e usuários
APperdim = sqrt(nmrAP); % Essa linha coloca a quantidade de APs ao longo da 'linha' do Grid

% Essa linha cria o vetor APcellular
APcellular = linspace(tSQUARE / APperdim, tSQUARE, (APperdim)) - tSQUARE / (2 * APperdim);

% Essa linha forma a matriz APcellular
APcellular = (repmat(APcellular, (APperdim), 1) + 1j * repmat(APcellular.', 1, (APperdim))) * 1;

nmrSetups = 1000;  % número de repetições da simulação

% Geração de posições aleatórias para os usuários
UElocations = (rand(nmrSetups, nmrUE) + 1i * rand(nmrSetups, nmrUE)) * tSQUARE;

%% Outros parâmetros importantes
% Cálculo de BC (largura de banda de cada canal)
bc = bT / nChannel;

% Potência do ruído
pN = k0 * bc;


% Função para cálculo da potência recebida
PReceiver = @(hor_distances,shadow)shadow .* UEpot .* (c ./ hor_distances.^a);  % potência recebida
quant=[];


%sinr = []; %Armazenamento dos valores de SINR
Shannon = zeros(nmrSetups, nmrUE);
best_sinrM=zeros(nmrSetups,nmrUE);
% Cálculo das potências recebidas
for i = 1:nmrSetups
    sinr=zeros(nmrAP,nmrUE);
    cont_sic=0;
    pot_values = zeros(nmrAP, nmrUE);  % Matriz com os valores de path-gain
    rayleigh_fading = raylrnd(1/sqrt(2), [nmrAP, nmrUE, nChannel]); % Rayleigh fading
    shadow = lognrnd(0, 2, nmrAP, nmrUE); %Sombreamento
    for ch=1:nChannel
        for j = 1:nmrUE
            distances = abs(UElocations(i, j) - APcellular(:));  % Distância entre o usuário e todos os APs
            pot_values(:, j) = PReceiver(distances,shadow(:, j)).*rayleigh_fading(:,j,ch).^2;  % Potência recebida
        end
    end
   
    %[~, ue_to_ap] = max(pot_values ,[], 1); % Identificação dos APs de maior path-gain (retorna qual o AP)
    % Loop que percorre os APs
    for f = 1:nmrAP
            gains = pot_values(f,:); % identifica quais ganhos do AP atual (retorna os valores)
            [~, ord] = sort(gains, 'descend'); %Ordena os valores , retorna os indices com relacão ao vetor gain(UE)
            ues_f = ord; % organiza os UE dos APs numa variavel
            cont_sic=cont_sic+1;

            for p = 1:nmrUE % loop para percorrer os usuarios SIC (UE que estao no AP atual)
                k = ues_f(p); % Usuario atual 
                %cont_sic=cont_sic+1;

                % Interferência intra-AP (dos usuários ainda nao cancelados pela SIC)
                intra_intf = 0;
                for j = (p+1):nmrUE
                    k_j = ues_f(j);
                    intra_intf = intra_intf +  pot_values(f,k_j);
                end
           
                  sinr(f,k) =   pot_values(f,k) / (intra_intf  + pN);
                
            end  
         
    end
     % MEC: Seleção da melhor SINR para cada UE
    best_sinr = max(sinr, [], 1);
    Shannon(i, :) = bc * log2(1 + best_sinr);
    best_sinrM(i,:)=best_sinr;
    quant=[quant,cont_sic];
 
end

%% Estatísticas
Shannon_ord = reshape(Shannon, 1, []);
media = mean(sum(Shannon, 2));
sinr_ord=reshape(best_sinrM, 1, []);

%cdf_vals = linspace(0, 1, numel(Shannon_ord));
Shannon_ord1 = sort(Shannon_ord);
Sinr_ord1=sort(sinr_ord);


% Percentis
percentile_10 = prctile(Shannon_ord1, 10) * 1e-6;
percentile_50 = prctile(Shannon_ord1, 50) * 1e-6;
percentile_90 = prctile(Shannon_ord1, 90) * 1e-6;

percentile_10SINR = prctile(Sinr_ord1, 10) * 1e-6;
percentile_50SINR = prctile(Sinr_ord1, 50) * 1e-6;
percentile_90SINR = prctile(Sinr_ord1, 90) * 1e-6;

fprintf('Percentil 10 [Mbps]: %.4f\n', percentile_10);
fprintf('Percentil 50 [Mbps]: %.4f\n', percentile_50);
fprintf('Percentil 90 [Mbps]: %.4f\n', percentile_90);
fprintf('Média da soma das capacidades [Mbps]: %.3f\n', media * 1e-6);

fprintf('SINR: Percentil 10 [dB]: %.4f\n', percentile_10SINR);
fprintf('SINR: Percentil 50 [dB]: %.4f\n', percentile_50SINR);
fprintf('SINR: Percentil 90 [dB]: %.4f\n', percentile_90SINR)

%% CDF
cdf_vals = linspace(0, 1, numel(Shannon_ord));
sorted_data = sort(Shannon_ord * 1e-6);


mediaSic=mean(quant);
